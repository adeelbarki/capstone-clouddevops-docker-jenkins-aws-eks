---
Description: >
  'Adeel Barki / Amazon EKS Script'
  'This template deploys VPC, subnets and security group for EKS cluster'
Parameters:

  EnvironmentName:
    Description: EKS network script
    Type: String

  VpcBlock:
    Type: String
    Default: 192.168.0.0/16
    Description: The CIDR range for the VPC. This should be a valid private (RFC 1918) CIDR range.

  Subnet01Block:
    Type: String
    Default: 192.168.64.0/18
    Description: CidrBlock for subnet 01 within the VPC

  Subnet02Block:
    Type: String
    Default: 192.168.128.0/18
    Description: CidrBlock for subnet 02 within the VPC

  Subnet03Block:
    Type: String
    Default: 192.168.192.0/18
    Description: CidrBlock for subnet 03 within the VPC. This is used only if the region has more than 2 AZs.
  
  ClusterName:
    Description: EKS cluster name
    Type: String

  BootstrapArguments:
    Description: Arguments to pass to the bootstrap script. See files/bootstrap.sh in https://github.com/awslabs/amazon-eks-ami
    Type: String
    Default: ""

  NodeAutoScalingGroupDesiredCapacity:
    Description: Desired capacity of Node Group ASG.
    Type: Number
    Default: 3

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Worker Network Configuration"
        Parameters:
          - VpcBlock
          - Subnet01Block
          - Subnet02Block
          - Subnet03Block

Conditions:
  Has2Azs:
    Fn::Or:
      - Fn::Equals:
        - {Ref: 'AWS::Region'}
        - ap-south-1
      - Fn::Equals:
        - {Ref: 'AWS::Region'}
        - ap-northeast-2
      - Fn::Equals:
        - {Ref: 'AWS::Region'}
        - ca-central-1
      - Fn::Equals:
        - {Ref: 'AWS::Region'}
        - cn-north-1

  HasMoreThan2Azs:
    Fn::Not:
      - Condition: Has2Azs

# ------------------ Netowrk Configuration --------------------

Resources:
  UVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:  !Ref VpcBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: !Ref EnvironmentName

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
            Tags:
                - Key: Name
                  Value: !Ref EnvironmentName

  VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref UVPC

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref UVPC
      Tags:
      - Key: Name
        Value: !Sub ${EnvironmentName} Public Routes
      - Key: Network
        Value: Public

  Route:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  Subnet01:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet 01
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: Subnet01Block
      VpcId:
        Ref: UVPC
      Tags:
      - Key: Name
        Value: !Sub "${EnvironmentName}-Subnet01"

  Subnet02:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet 02
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: Subnet02Block
      VpcId:
        Ref: UVPC
      Tags:
      - Key: Name
        Value: !Sub "${EnvironmentName}-Subnet02"

  Subnet03:
    Condition: HasMoreThan2Azs
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet 03
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '2'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: Subnet03Block
      VpcId:
        Ref: UVPC
      Tags:
      - Key: Name
        Value: !Sub "${EnvironmentName}-Subnet03"

  Subnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet01
      RouteTableId: !Ref RouteTable

  Subnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet02
      RouteTableId: !Ref RouteTable

  Subnet03RouteTableAssociation:
    Condition: HasMoreThan2Azs
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet03
      RouteTableId: !Ref RouteTable

  ControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Cluster communication with worker nodes
      VpcId: !Ref UVPC

# ------------------------ EKS cluster formation ------------------

  EKSRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
      -  "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
      -  "arn:aws:iam::aws:policy/AmazonEKSServicePolicy"
      AssumeRolePolicyDocument: {
        "Version" : "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Principal": {
              "Service": [ "eks.amazonaws.com" ]
            },
            "Action": [ "sts:AssumeRole" ]
          }
        ]
      }

  AmazonEKS:
    Type: AWS::EKS::Cluster
    Properties: 
      Name: !Ref ClusterName
      ResourcesVpcConfig:
        SecurityGroupIds: 
          - Ref: ControlPlaneSecurityGroup
        SubnetIds: [!Ref Subnet01, !Ref Subnet02, !Ref Subnet03]
      RoleArn: {
        "Fn::GetAtt" : [
          "EKSRole", "Arn"
        ]
      }
      Version: 1.13

# --------------------- Outputs ----------------------------------

Outputs:

  SubnetIds:
    Description: All subnets in the VPC
    Value:
      Fn::If:
      - HasMoreThan2Azs
      - !Join [ ",", [ !Ref Subnet01, !Ref Subnet02, !Ref Subnet03 ] ]
      - !Join [ ",", [ !Ref Subnet01, !Ref Subnet02 ] ]

  OutSubnet01:
    Description: Output Subnet01
    Value: !Ref Subnet01
    Export:
      Name: !Sub Subnet01
  
  OutSubnet02:
    Description: Output Subnet02
    Value: !Ref Subnet02
    Export:
      Name: !Sub Subnet02

  OutSubnet03:
    Description: Output Subnet03
    Value: !Ref Subnet03
    Export:
      Name: !Sub Subnet03

  
  SecurityGroups:
    Description: Security group for the cluster control plane communication with worker nodes
    Value: !Join [ ",", [ !Ref ControlPlaneSecurityGroup ] ]
    Export:
      Name: !Sub ControlPlaneSecurityGroup

  UVPC:
        Description: A reference to the created VPC
        Value: !Ref UVPC
        Export:
            Name: !Sub ${EnvironmentName}-VPCID

  ClusterName:
    Description: A reference to the EKS cluster name 
    Value: !Ref ClusterName
    Export:
      Name: !Sub ClusterName
  